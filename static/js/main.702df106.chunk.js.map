{"version":3,"sources":["components/Todo/index.js","redux/actions.js","redux/selectors.js","components/TodoList/todoSlice.js","components/TodoList/index.js","components/Filters/filterSlice.js","components/Filters/index.js","App.js","redux/store.js","index.js"],"names":["priorityColorMapping","High","Medium","Low","Todo","id","name","prioriry","completed","useState","checked","setChecked","dispatch","useDispatch","justify","style","marginBottom","opacity","textDecoration","onChange","type","payload","toggleTodoStatus","color","margin","todosRemainingSelector","createSelector","state","todoList","filter","search","status","priority","searchText","statusRadio","priorites","todo","length","includes","createSlice","initialState","reducers","addTodo","action","push","currentTodo","find","TodoList","todoName","setTodoName","setPriority","useSelector","console","log","height","span","overflowY","map","Group","display","compact","value","e","target","defaultValue","Option","label","onClick","todoListSlice","actions","uuidv4","searchFilterChange","statusFilterChange","priorityFilterChange","Search","Input","Filters","setSearchText","setStatusRadio","Paragraph","fontWeight","marginTop","filterSlice","placeholder","sm","mode","allowClear","width","Title","Typography","App","flexDirection","backgroundColor","padding","boxShadow","borderRadius","textAlign","store","configureStore","reducer","todoListReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.702df106.chunk.js","sourcesContent":["import { Row, Tag, Checkbox } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleTodoStatus } from '../../redux/actions';\r\n\r\nconst priorityColorMapping = {\r\n  High: 'red',\r\n  Medium: 'blue',\r\n  Low: 'gray',\r\n};\r\n\r\nexport default function Todo({id, name, prioriry, completed }) {\r\n  const [checked, setChecked] = useState(completed);\r\n  const dispatch = useDispatch();\r\n  const toggleCheckbox = () => {\r\n    setChecked(!checked);\r\n    dispatch(toggleTodoStatus(id));\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      justify='space-between'\r\n      style={{\r\n        marginBottom: 3,\r\n        ...(checked ? { opacity: 0.5, textDecoration: 'line-through' } : {}),\r\n      }}\r\n    >\r\n      <Checkbox checked={checked} onChange={toggleCheckbox}>\r\n        {name}\r\n      </Checkbox>\r\n      <Tag color={priorityColorMapping[prioriry]} style={{ margin: 0 }}>\r\n        {prioriry}\r\n      </Tag>\r\n    </Row>\r\n  );\r\n}\r\n","// export const addTodoAction = {\r\n//     type: 'todoList/addTodo',\r\n//     payload: {}\r\n// }\r\nexport const addTodo = (data) => {\r\n    return {\r\n        type: 'todoList/addTodo',\r\n        payload: data\r\n    }\r\n}\r\nexport const toggleTodoStatus = (id) => {\r\n    return {\r\n        type: 'todoList/toggleTodoStatus',\r\n        payload: id\r\n    }\r\n}\r\nexport const searchFilterChange = (text) => {\r\n    return {\r\n        type: 'filters/searchFilterChange',\r\n        payload: text\r\n    }\r\n}\r\n\r\n\r\nexport const statusFilterChange = (status) => {\r\n    return {\r\n        type: 'filters/statusFilterChange',\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const priorityFilterChange = (priorites) => {\r\n    return {\r\n        type: 'filters/priorityFilterChange',\r\n        payload: priorites\r\n    }\r\n}","import { createSelector } from '@reduxjs/toolkit'\r\nexport const todoListSelector = (state) => state.todoList;\r\n\r\nexport const searchTextSelector = (state) => state.filter.search;\r\nexport const statusRadioSelector = (state) => state.filter.status;\r\nexport const prioritiesSelector = (state) => state.filter.priority;\r\nexport const todosRemainingSelector = createSelector(\r\n    todoListSelector,\r\n    searchTextSelector,\r\n    statusRadioSelector,\r\n    prioritiesSelector,\r\n    (todoList, searchText, statusRadio, priorites) => {\r\n        return todoList.filter((todo) => {\r\n            if ( statusRadio === 'All') {\r\n                return priorites.length \r\n                    ? todo.name.includes(searchText) && priorites.includes(todo.priority)\r\n                    : todo.name.includes(searchText);\r\n            }\r\n            return (todo.name.includes(searchText) && \r\n            ( statusRadio === 'Completed' ? todo.completed : !todo.completed ) &&  (priorites.length ? priorites.includes(todo.priority) : true));\r\n        })\r\n    }\r\n\r\n)","// const initState = [\r\n//     {\r\n//         id: 1,\r\n//         name: 'Learn abc',\r\n//         completed: false,\r\n//         priority: 'High'\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         name: 'Learn abcd',\r\n//         completed: true,\r\n//         priority: 'Medium'\r\n//     },\r\n//     {\r\n//         id: 3,\r\n//         name: 'Learn abc asdf',\r\n//         completed: false,\r\n//         priority: 'Low'\r\n//     }\r\n// ];\r\n\r\n// const todoListReducer = (state = initState, action) => {\r\n//     console.log(state, action)\r\n//     switch(action.type) {\r\n//         case 'todoList/addTodo':\r\n//             return [\r\n//                 ...state, action.payload\r\n//                 ]\r\n//         case 'todoList/toggleTodoStatus':\r\n//             return state.map(todo => todo.id === action.payload ? {...todo, completed: !todo.completed} : todo)\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n//  export default todoListReducer;\r\n\r\nimport { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport default createSlice({\r\n    name: 'todoList',\r\n    initialState: [\r\n        {\r\n            id: 1,\r\n            name: 'Learn abc',\r\n            completed: false,\r\n            priority: 'High'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Learn abcd',\r\n            completed: true,\r\n            priority: 'Medium'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Learn abc asdf',\r\n            completed: false,\r\n            priority: 'Low'\r\n        },\r\n    ],\r\n    reducers: {\r\n        addTodo: (state, action) => {\r\n            state.push(action.payload)\r\n        },\r\n        toggleTodoStatus: (state, action) => {\r\n            const currentTodo = state.find(todo => todo.id === action.payload)\r\n            currentTodo.completed = !currentTodo.completed;\r\n        }\r\n    }\r\n})","import { Col, Row, Input, Button, Select, Tag } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v4 as uuidv4} from 'uuid';\r\nimport Todo from '../Todo';\r\nimport { todosRemainingSelector } from '../../redux/selectors';\r\nimport todoListSlice from './todoSlice'\r\nexport default function TodoList() {\r\n  const [todoName, setTodoName] = useState('')\r\n  const [priority, setPriority] = useState('Medium')\r\n\r\n  const todoList = useSelector(todosRemainingSelector) \r\n  console.log(todoList)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleAddButtonClick = () => {\r\n    if(todoName === '')\r\n      \treturn;\r\n    dispatch(todoListSlice.actions.addTodo({\r\n\t\t\tid: uuidv4(),\r\n\t\t\tname: todoName,\r\n\t\t\tpriority: priority,\r\n\t\t\tcompleted: false\r\n\t\t}));\r\n    setTodoName('')\r\n    setPriority('Medium')\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    setTodoName(e.target.value);\r\n  }\r\n\r\n  const handleProrityChange = (value) => {\r\n    setPriority(value)\r\n  }\r\n\r\n  return (\r\n    <Row style={{ height: 'calc(100% - 40px)' }}>\r\n      <Col span={24} style={{ height: 'calc(100% - 40px)', overflowY: 'auto' }}>\r\n        {/* <Todo name='Learn React' prioriry='High' />\r\n        <Todo name='Learn Redux' prioriry='Medium' />\r\n        <Todo name='Learn JavaScript' prioriry='Low' /> */}\r\n        { todoList.map((todo) => (\r\n          <Todo id={todo.id} name={todo.name} prioriry={todo.priority} key={todo.id} completed={todo.completed} />\r\n        ))}\r\n      </Col>\r\n      <Col span={24}>\r\n        <Input.Group style={{ display: 'flex' }} compact>\r\n          <Input value={todoName} onChange={handleInputChange} />\r\n          <Select value={priority} onChange={handleProrityChange} defaultValue=\"Medium\">\r\n            <Select.Option value='High' label='High'>\r\n              <Tag color='red'>High</Tag>\r\n            </Select.Option>\r\n            <Select.Option value='Medium' label='Medium'>\r\n              <Tag color='blue'>Medium</Tag>\r\n            </Select.Option>\r\n            <Select.Option value='Low' label='Low'>\r\n              <Tag color='gray'>Low</Tag>\r\n            </Select.Option>\r\n          </Select>\r\n          <Button type='primary' onClick={handleAddButtonClick}>\r\n            Add\r\n          </Button>\r\n        </Input.Group>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","// const initState = { \r\n//     search: '',\r\n//     status: 'All',\r\n//     priority: []\r\n    \r\n// };\r\n\r\n// const filterReducer = (state = initState, action) => {\r\n//     switch(action.type) {\r\n//         case 'filters/searchFilterChange':\r\n//             return {\r\n//                 ...state,\r\n//                 search: action.payload\r\n                \r\n//             }\r\n//         case 'filters/statusFilterChange':\r\n//             return {\r\n//                 ...state,\r\n//                 status: action.payload    \r\n//             }\r\n//         case 'filters/priorityFilterChange':\r\n//             return {\r\n//                 ...state,\r\n//                 priority:  action.payload \r\n//             }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n//  export default filterReducer;\r\n\r\nimport { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport default createSlice({\r\n    name: 'filter',\r\n    initialState: {\r\n        search: '',\r\n        status: 'All',\r\n        priority: []\r\n    },\r\n    reducers: {\r\n        searchFilterChange: (state, action) => {\r\n            state.search = action.payload\r\n        },\r\n        statusFilterChange: (state, action) => {\r\n            state.status = action.payload\r\n        },\r\n        priorityFilterChange: (state, action) => {\r\n            state.priority = action.payload\r\n\r\n        }\r\n    }\r\n})","import { Col, Row, Input, Typography, Radio, Select, Tag } from 'antd';\r\nimport { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\n// import { searchFilterChange, statusFilterChange, priorityFilterChange } from '../../redux/actions';\r\nimport filterSlice from './filterSlice';\r\nconst { Search } = Input;\r\n\r\nexport default function Filters() {\r\n  const [searchText, setSearchText] = useState('')\r\n  const [statusRadio, setStatusRadio] = useState('All')\r\n  const [priority, setPriority] = useState([])\r\n  const dispatch = useDispatch();\r\n\r\n  const handleStatusRadioChange = (e) => {\r\n    setStatusRadio(e.target.value); //filters/statusFilterChange\r\n    dispatch(filterSlice.actions.statusFilterChange(e.target.value))\r\n  }\r\n  const handleSearchTextChange = (e) => {\r\n    setSearchText(e.target.value);\r\n    dispatch(filterSlice.actions.searchFilterChange(e.target.value))\r\n  }\r\n\r\n  const handlePriorityChange = (value) => {\r\n    setPriority(value)\r\n    dispatch(filterSlice.actions.priorityFilterChange(value))\r\n  }\r\n  return (\r\n    <Row justify='center'>\r\n      <Col span={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Search\r\n        </Typography.Paragraph>\r\n        <Search value={searchText} onChange={handleSearchTextChange} placeholder='input search text' />\r\n      </Col>\r\n      <Col sm={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Filter By Status\r\n        </Typography.Paragraph>\r\n        <Radio.Group value={statusRadio} onChange={handleStatusRadioChange}>\r\n          <Radio value='All'>All</Radio>\r\n          <Radio value='Completed'>Completed</Radio>\r\n          <Radio value='Todo'>To do</Radio>\r\n        </Radio.Group>\r\n      </Col>\r\n      <Col sm={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Filter By Priority\r\n        </Typography.Paragraph>\r\n        <Select\r\n          value={priority}\r\n          onChange={handlePriorityChange}\r\n          mode='multiple'\r\n          allowClear\r\n          placeholder='Please select'\r\n          style={{ width: '100%' }}\r\n        >\r\n          <Select.Option value='High' label='High'>\r\n            <Tag color='red'>High</Tag>\r\n          </Select.Option>\r\n          <Select.Option value='Medium' label='Medium'>\r\n            <Tag color='blue'>Medium</Tag>\r\n          </Select.Option>\r\n          <Select.Option value='Low' label='Low'>\r\n            <Tag color='gray'>Low</Tag>\r\n          </Select.Option>\r\n        </Select>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { Typography, Divider } from 'antd';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList';\r\nimport Filters from './components/Filters';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction App() {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: 500,\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: 'white',\r\n        padding: 20,\r\n        boxShadow: '0 0 10px 4px #bfbfbf',\r\n        borderRadius: 5,\r\n        height: '90vh',\r\n      }}\r\n    >\r\n      <Title style={{ textAlign: 'center' }}>TODO APP with REDUX</Title>\r\n      <Filters />\r\n      <Divider />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\n// import { createStore } from 'redux'\r\n// import rootReducer from './reducer';\r\n// import { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\n// const composeEnhenser = composeWithDevTools();\r\n// const store = createStore(rootReducer, composeEnhenser);\r\n\r\n// export default store;\r\n\r\nimport filterSlice from '../components/Filters/filterSlice'\r\nimport todoListReducer from '../components/TodoList/todoSlice'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n\r\nconst store = configureStore(\r\n    {\r\n        reducer: {\r\n            filter: filterSlice.reducer,\r\n            todoList: todoListReducer.reducer\r\n        }\r\n    }\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport {Provider} from 'react-redux'\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n, document.getElementById('root'));"],"sourceRoot":""}